{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","addTask","className","htmlFor","type","id","autoComplete","value","onChange","target","FilterButton","aria-pressed","isPressed","onClick","setFilter","Todo","newName","setNewName","isEditing","setEditing","editingTemplate","editTask","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","updatedTasks","map","remainingTasks","editedTaskList","taskList","filterList","tasksNoun","length","headingText","newTask","nanoid","role","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b814fcc.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction Form(props) {\r\n  const [name, setName] = useState('');\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.addTask(name);\r\n    setName('');\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2 className='label-wrapper'>\r\n        <label htmlFor='new-todo-input' className='label__lg'>\r\n          What needs to be done?\r\n        </label>\r\n      </h2>\r\n      <input\r\n        type='text'\r\n        id='new-todo-input'\r\n        className='input input__lg'\r\n        name='text'\r\n        autoComplete='off'\r\n        value={name}\r\n        onChange={handleChange}\r\n      />\r\n      <button type='submit' className='btn btn__primary btn__lg'>\r\n        Add\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nfunction FilterButton(props) {\r\n  return (\r\n    <button\r\n      type='button'\r\n      className='btn toggle-btn'\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className='visually-hidden'>Show </span>\r\n      <span>{props.name}</span>\r\n      <span className='visually-hidden'> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;\r\n","import React, { useRef, useState } from 'react';\r\n\r\nexport default function Todo(props) {\r\n  const [newName, setNewName] = useState('');\r\n\r\n  const [isEditing, setEditing] = useState(false);\r\n\r\n  function handleChange(e) {\r\n    setNewName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.editTask(props.id, newName);\r\n    setNewName('');\r\n    setEditing(false);\r\n  }\r\n\r\n  const editingTemplate = (\r\n    <form className='stack-small' onSubmit={handleSubmit}>\r\n      <div className='form-group'>\r\n        <label className='todo-label' htmlFor={props.id}>\r\n          New name for {props.name}\r\n        </label>\r\n        <input\r\n          id={props.id}\r\n          className='todo-text'\r\n          type='text'\r\n          value={newName}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div className='btn-group'>\r\n        <button\r\n          type='button'\r\n          className='btn todo-cancel'\r\n          onClick={() => setEditing(false)}\r\n        >\r\n          Cancel\r\n          <span className='visually-hidden'>renaming {props.name}</span>\r\n        </button>\r\n        <button type='submit' className='btn btn__primary todo-edit'>\r\n          Save\r\n          <span className='visually-hidden'>new name for {props.name}</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n\r\n  const viewTemplate = (\r\n    <div className='stack-small'>\r\n      <div className='c-cb'>\r\n        <input\r\n          id={props.id}\r\n          type='checkbox'\r\n          defaultChecked={props.completed}\r\n          onChange={() => props.toggleTaskCompleted(props.id)}\r\n        />\r\n        <label className='todo-label' htmlFor={props.id}>\r\n          {props.name}\r\n        </label>\r\n      </div>\r\n      <div className='btn-group'>\r\n        <button type='button' className='btn' onClick={() => setEditing(true)}>\r\n          Edit <span className='visually-hidden'>{props.name}</span>\r\n        </button>\r\n        <button\r\n          type='button'\r\n          className='btn btn__danger'\r\n          onClick={() => props.deleteTask(props.id)}\r\n        >\r\n          Delete <span className='visually-hidden'>{props.name}</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return <li className='todo'>{isEditing ? editingTemplate : viewTemplate}</li>;\r\n}\r\n","import React, { useState } from 'react';\r\n// import logo from './logo.svg';\r\nimport styles from './App.module.scss';\r\nimport Form from './components/Form';\r\nimport FilterButton from './components/FilterButton';\r\nimport Todo from './components/Todo';\r\nimport { nanoid } from 'nanoid';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst FILTER_MAP = {\r\n  All: () => true,\r\n  Active: (task) => !task.completed,\r\n  Completed: (task) => task.completed,\r\n};\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\nfunction App(props) {\r\n  const [tasks, setTasks] = useState(props.tasks);\r\n  const [filter, setFilter] = useState('All');\r\n\r\n  function toggleTaskCompleted(id) {\r\n    const updatedTasks = tasks.map((task) => {\r\n      // if this task has the same ID as the edited task\r\n      if (id === task.id) {\r\n        // use object spread to make a new object\r\n        // whose `completed` prop has been inverted\r\n        return { ...task, completed: !task.completed };\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(updatedTasks);\r\n  }\r\n\r\n  function deleteTask(id) {\r\n    const remainingTasks = tasks.filter((task) => id !== task.id);\r\n    setTasks(remainingTasks);\r\n  }\r\n\r\n  function editTask(id, newName) {\r\n    const editedTaskList = tasks.map((task) => {\r\n      // if this task has the same ID as the edited task\r\n      if (id === task.id) {\r\n        //\r\n        return { ...task, name: newName };\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(editedTaskList);\r\n  }\r\n\r\n  const taskList = tasks\r\n    .filter(FILTER_MAP[filter])\r\n    .map((task) => (\r\n      <Todo\r\n        id={task.id}\r\n        name={task.name}\r\n        completed={task.completed}\r\n        key={task.id}\r\n        toggleTaskCompleted={toggleTaskCompleted}\r\n        deleteTask={deleteTask}\r\n        editTask={editTask}\r\n      />\r\n    ));\r\n\r\n  const filterList = FILTER_NAMES.map((name) => (\r\n    <FilterButton\r\n      key={name}\r\n      name={name}\r\n      isPressed={name === filter}\r\n      setFilter={setFilter}\r\n    />\r\n  ));\r\n\r\n  function addTask(name) {\r\n    const newTask = { id: 'todo-' + nanoid(), name: name, completed: false };\r\n    setTasks([...tasks, newTask]);\r\n  }\r\n\r\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\r\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\r\n\r\n  return (\r\n    <div className='todoapp stack-large'>\r\n      <Form addTask={addTask} />\r\n      <div className='filters btn-group stack-exception'>{filterList}</div>\r\n      <h2 id='list-heading'>{headingText}</h2>\r\n      <ul\r\n        role='list'\r\n        className='todo-list stack-large stack-exception'\r\n        aria-labelledby='list-heading'\r\n      >\r\n        {taskList}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\n/*Class second try*/\r\n// let PreSetTasks = [\r\n//   { id: 'todo-0', name: 'Eat', completed: true },\r\n//   { id: 'todo-1', name: 'Sleep', completed: true },\r\n//   { id: 'todo-2', name: 'Repeat', completed: false },\r\n// ];\r\n\r\n// class EveryThing extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <form>\r\n//           <h2>What needs to be done?</h2>\r\n//           <input type='text'></input>\r\n//           <button type='submit'>Add</button>\r\n//         </form>\r\n//         <div>\r\n//           <button>Show All tasks</button>\r\n//           <button>Show Active tasks</button>\r\n//           <button>Show Completed tasks</button>\r\n//         </div>\r\n//         <h2>3 tasks remaining</h2>\r\n//         <ul>\r\n//           <li></li>\r\n//           <li></li>\r\n//           <li></li>\r\n//         </ul>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// window.addEventListener('load', () => {\r\n//   let RenderEveryThing = React.createElement(EveryThing, null);\r\n//   ReactDOM.render(RenderEveryThing, document.getElementById('root2'));\r\n// });\r\n\r\n/*Class first try*/\r\n// class DivSpace extends React.Component {\r\n//   render() {\r\n//     return React.createElement('DIV', null, '');\r\n//   }\r\n// }\r\n\r\n// class Title extends React.Component {\r\n//   render() {\r\n//     return React.createElement('H2', null, 'What needs to be done?');\r\n//   }\r\n// }\r\n\r\n// class Input extends React.Component {\r\n//   render() {\r\n//     return React.createElement('INPUT', null, '');\r\n//   }\r\n// }\r\n\r\n// class EveryThing extends React.Component {\r\n//   render() {\r\n//     let DivSpaceRendering = React.createElement(DivSpace, null);\r\n//     let TitleRendering = React.createElement(Title, null);\r\n//     let InputRendering = React.createElement(Input, null);\r\n//     let EveryThingDetail = [\r\n//       DivSpaceRendering,\r\n//       DivSpaceRendering,\r\n//       TitleRendering,\r\n//       InputRendering,\r\n//     ];\r\n//     return React.createElement('DIV', null, EveryThingDetail);\r\n//   }\r\n// }\r\n\r\n// window.addEventListener('load', () => {\r\n//   let RenderEveryThing = React.createElement(EveryThing, null);\r\n//   ReactDOM.render(RenderEveryThing, document.getElementById('root2'));\r\n// });\r\n\r\n// // let reactElement = React.createElement('H1', null, 'Hello World!');\r\n// // ReactDOM.render(reactElement, document.getElementById('root2'));\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst DATA = [\r\n  { id: 'todo-0', name: 'Eat', completed: true },\r\n  { id: 'todo-1', name: 'Sleep', completed: true },\r\n  { id: 'todo-2', name: 'Repeat', completed: false },\r\n];\r\n\r\nReactDOM.render(<App tasks={DATA} />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}